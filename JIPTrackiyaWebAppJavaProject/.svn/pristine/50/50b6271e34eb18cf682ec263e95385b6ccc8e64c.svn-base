package com.jhamobi.trackiya.client;

import java.util.Arrays;
import java.util.List;

import com.google.gwt.cell.client.Cell.Context;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.user.cellview.client.CellTable;
import com.google.gwt.user.cellview.client.TextColumn;
import com.google.gwt.user.cellview.client.HasKeyboardSelectionPolicy.KeyboardSelectionPolicy;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.DialogBox;
import com.google.gwt.user.client.ui.HTML;
import com.google.gwt.user.client.ui.HorizontalPanel;
import com.google.gwt.user.client.ui.VerticalPanel;
import com.google.gwt.view.client.CellPreviewEvent;
import com.google.gwt.view.client.CellPreviewEvent.Handler;

public class VehicleListWebPage {

	String imagePath = "images/ic_launcher.png";

	public VehicleListWebPage() {
	}

	public CellTable<VehicleDetail> InitVehicleListWebPage() {

		VehicleDetail vehicle1 = new VehicleDetail("MH12AE7401", "Auto", "John", "9730246928", "Smith", "8605662779",
				"Running", "Hyatt, Vimannagar", "9.5 Hrs");
		VehicleDetail vehicle2 = new VehicleDetail("MH12AE7410", "Uno", "Mohan", "9730246928", "Ram", "8605662779",
				"Stop", "Le Royale , Hinzewadi", "5 hrs");

		final List<VehicleDetail> VehicleList = Arrays.asList(vehicle1, vehicle2);

		// Create a CellTable.
		CellTable<VehicleDetail> table = new CellTable<VehicleDetail>();
		table.setKeyboardSelectionPolicy(KeyboardSelectionPolicy.ENABLED);

		// Add a text column to show the name.
		TextColumn<VehicleDetail> vehicleNum = new TextColumn<VehicleDetail>() {
			@Override
			public String getValue(VehicleDetail object) {
				return object.getVehicleNum();
			}
		};
		table.addColumn(vehicleNum, "Vehicle No.");

		// Add a text column to show the name.
		TextColumn<VehicleDetail> vehicleType = new TextColumn<VehicleDetail>() {
			@Override
			public String getValue(VehicleDetail object) {
				return object.getVehicleType();
			}
		};
		table.addColumn(vehicleType, "Vehicle Type");

		TextColumn<VehicleDetail> driverName = new TextColumn<VehicleDetail>() {
			@Override
			public String getValue(VehicleDetail object) {
				return object.getDriverName();
			}
		};
		table.addColumn(driverName, "Driver Name");

		TextColumn<VehicleDetail> driverNum = new TextColumn<VehicleDetail>() {
			@Override
			public String getValue(VehicleDetail object) {
				return object.getDriverNum();
			}
		};
		table.addColumn(driverNum, "Driver Number");

		TextColumn<VehicleDetail> ownerName = new TextColumn<VehicleDetail>() {
			@Override
			public String getValue(VehicleDetail object) {
				return object.getOwnerName();
			}
		};
		table.addColumn(ownerName, "Owner Name");

		TextColumn<VehicleDetail> ownerNum = new TextColumn<VehicleDetail>() {
			@Override
			public String getValue(VehicleDetail object) {
				return object.getOwnerNum();
			}
		};
		table.addColumn(ownerNum, "Owner Number");

		// Add a text column to show the name.
		TextColumn<VehicleDetail> runningStatus = new TextColumn<VehicleDetail>() {
			@Override
			public String getCellStyleNames(Context context, VehicleDetail object) {
				String style = null;
				String runningStatusStr = object.getVehicleRunningStatus();
				if (runningStatusStr.equals("Running"))
					style = "gwt-Green-Text";
				else if (runningStatusStr.equals("Stop"))
					style = "gwt-Red-Text";
				return style;
			}

			@Override
			public String getValue(VehicleDetail object) {
				return object.getVehicleRunningStatus();
			}
		};
		table.addColumn(runningStatus, "Running Status");

		// ImageCell imageCell1 = new ImageCell() {
		// @Override
		// public void render(Context context, String value, SafeHtmlBuilder sb)
		// {
		// super.render(context, value, sb);
		// sb.appendHtmlConstant("<img src = '"+imagePath+"' height = '10px' width = '10px' />");
		//
		// }
		// };
		//
		// Column<VehicleDetail, String> columnflag = new Column<VehicleDetail,
		// String>(imageCell1) {
		//
		//
		// @Override
		// public String getValue(VehicleDetail object) {
		// // TODO Auto-generated method stub
		// return object.getVehicleRunningStatus();
		// }
		// };
		//
		// table.addColumn(columnflag, "Running Status");

		// Add a text column to show the name.
		TextColumn<VehicleDetail> currLocation = new TextColumn<VehicleDetail>() {
			@Override
			public String getValue(VehicleDetail object) {
				return object.getVehicleCurrLoc();
			}
		};
		table.addColumn(currLocation, "Current Location");

		// Add a text column to show the name.
		TextColumn<VehicleDetail> timeLapsed = new TextColumn<VehicleDetail>() {
			@Override
			public String getValue(VehicleDetail object) {
				return object.getVehicleTimeLapsed();
			}
		};
		table.addColumn(timeLapsed, "Time Lapsed");

		// Set the total row count. This isn't strictly necessary, but it
		// affects
		// paging calculations, so its good habit to keep the row count up to
		// date.
		table.setRowCount(VehicleList.size(), true);

		// Push the data into the widget.
		table.setRowData(0, VehicleList);

		table.addCellPreviewHandler(new Handler<VehicleDetail>() {

			@Override
			public void onCellPreview(CellPreviewEvent<VehicleDetail> event) {
				if ("click".equals(event.getNativeEvent().getType())) {
					if (event.getColumn() >= 0) {
						VehicleDetail object = event.getValue();
						// Window.alert("Column clicked: " + event.getColumn());

						ShowDialogBox();
					}
				}
			}

		});

		return table;
	}

	private void ShowDialogBox() {
		// Create the popup dialog box
		final DialogBox dialogBox = new DialogBox();
		dialogBox.setText("Detail");
		dialogBox.setAnimationEnabled(true);
		HorizontalPanel hpSumitClose = new HorizontalPanel();
		final Button closeButton = new Button("Close");
		// We can set the id of a widget by accessing its Element
		closeButton.getElement().setId("standardButton");
		hpSumitClose.add(closeButton);

		// final Label quesContentLabel = new Label();
		final HTML quesContentHtml = new HTML();
		quesContentHtml.setHTML("&int;<sub>0</sub><sup>&infin;</sup> e<sup>-st</sup>");
		final HTML option1ContentHtml = new HTML();
		final HTML option2ContentHtml = new HTML();
		final HTML option3ContentHtml = new HTML();
		final HTML option4ContentHtml = new HTML();
		final HTML solutionContentHtml = new HTML();

		VerticalPanel dialogVPanel = new VerticalPanel();
		dialogVPanel.addStyleName("dialogVPanel");
		dialogVPanel.add(new HTML("<b>Question Content : </b>"));
		dialogVPanel.add(quesContentHtml);
		dialogVPanel.add(new HTML("<br><b>Option 1 : </b>"));
		dialogVPanel.add(option1ContentHtml);
		dialogVPanel.add(new HTML("<br><b>Option 2 : </b>"));
		dialogVPanel.add(option2ContentHtml);
		dialogVPanel.add(new HTML("<br><b>Option 3 : </b>"));
		dialogVPanel.add(option3ContentHtml);
		dialogVPanel.add(new HTML("<br><b>Option 4 : </b>"));
		dialogVPanel.add(option4ContentHtml);
		dialogVPanel.add(new HTML("<br><b>Solution : </b>"));
		dialogVPanel.add(solutionContentHtml);
		dialogVPanel.setHorizontalAlignment(VerticalPanel.ALIGN_RIGHT);
		dialogVPanel.add(hpSumitClose);
		dialogBox.setWidget(dialogVPanel);

		dialogVPanel.add(closeButton);
		dialogBox.setWidget(dialogVPanel);

		dialogBox.center();
		closeButton.setFocus(true);

		dialogBox.show();

		// Add a handler to close the DialogBox
		closeButton.addClickHandler(new ClickHandler() {
			public void onClick(ClickEvent event) {
				dialogBox.hide();
			}
		});

	}

}
